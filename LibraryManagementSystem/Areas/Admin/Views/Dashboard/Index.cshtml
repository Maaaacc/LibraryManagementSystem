@model AdminDashboardViewModel

<h1>Admin Dashboard</h1>
<p class="text-secondary">Overview of library system status and key metrics</p>

<!-- Summary Cards Row -->
<div class="row mb-4 py-5" style="background-color: var(--color-surface);">
    <div class="col-md-3">
        <div class="card p-3 summary-card">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="metric-label">Total Users</h5>
                    <h2 class="metric-value">@(Model?.TotalUsers ?? 0)</h2>
                    <p class="metric-description">
                        @(Model?.ActiveUsers ?? 0) active, @(Model?.PendingUsers ?? 0) pending
                        <span title="@(string.Join(", ", Model?.UserStatusCounts?.Select(kv => $"{kv.Key}: {kv.Value}") ?? new List<string>()))">
                            &#9432;
                        </span>
                    </p>
                </div>
                <div class="summary-card-icon icon-users">
                    <i class="bi bi-people"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card p-3 summary-card">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="metric-label">Total Books</h5>
                    <h2 class="metric-value">@(Model?.TotalBooks ?? 0)</h2>
                    <p class="metric-description">@(Model?.AvailableCopies ?? 0) available copies</p>
                </div>
                <div class="summary-card-icon icon-books">
                    <i class="bi bi-book"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card p-3 summary-card">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="metric-label">Currently Borrowed</h5>
                    <h2 class="metric-value">@(Model?.CurrentlyBorrowed ?? 0)</h2>
                    <p class="metric-description">out of @(Model?.AvailableCopies ?? 0)</p>
                </div>
                <div class="summary-card-icon icon-borrowed">
                    <i class="bi bi-arrow-down-circle"></i>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card p-3 summary-card">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="metric-label">Overdue Books</h5>
                    <h2 class="metric-value">@(Model?.OverdueBooks ?? 0)</h2>
                    <p class="text-danger metric-description">require immediate attention</p>
                </div>
                <div class="summary-card-icon icon-overdue">
                    <i class="bi bi-exclamation-triangle"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Charts Row -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card summary-card h-100">
            <div class="card-header bg-white border-bottom">
                <h5 class="mb-0 metric-label">Borrowing Trend (Last 6 Months)</h5>
            </div>
            <div class="card-body chart-container">
                <canvas id="borrowTrendChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card summary-card h-100">
            <div class="card-header bg-white border-bottom">
                <h5 class="mb-0 metric-label">Book Categories Distribution</h5>
            </div>
            <div class="card-body chart-container d-flex justify-content-center align-items-center">
                <canvas id="categoryPieChart" style="max-width: 250px; max-height: 250px;"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Pending Verification and Recent Activities Row -->
<div class="row mb-4">
    <div class="col-md-6">
        <div class="card summary-card h-100">
            <div class="card-header bg-white border-bottom">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-0 metric-label">Pending User Verifications</h5>
                        <small class="text-muted">Users awaiting account verification</small>
                    </div>
                    <span class="badge bg-secondary">@(Model?.PendingUsers ?? 0)</span>
                </div>
            </div>
            <div class="card-body d-flex flex-column">
                <div class="flex-grow-1">
                    @if (Model?.PendingUsersList != null && Model.PendingUsersList.Any())
                    {
                        @foreach (var user in Model.PendingUsersList.Take(3))
                        {
                            <div class="d-flex mb-2 rounded align-items-start">
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between">
                                        <span class="fw-bold">@user.FullName</span>
                                        <span class="badge bg-secondary">Pending</span>
                                    </div>
                                    <div class="text-muted small">@user.Email</div>
                                    <div class="text-muted small">Student ID: @(user.StudentIdNumber ?? "N/A")</div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-check-circle text-success" style="font-size: 3rem;"></i>
                            <p class="text-muted mt-2">No pending verifications</p>
                        </div>
                    }
                </div>

                @if (Model?.PendingUsersList != null && Model.PendingUsersList.Any())
                {
                    <div class="text-center mt-3">
                        <a href="@Url.Action("Index", "Users", new { area = "Admin", status = "PendingVerification" })"
                           class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-eye me-1"></i>View All Pending Users
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Recent Activities -->
    <div class="col-md-6">
        <div class="card summary-card h-100">
            <div class="card-header bg-white border-bottom">
                <h5 class="mb-0 metric-label">Recent Activities</h5>
                <small class="text-muted">Latest user actions in the system</small>
            </div>
            <div class="card-body d-flex flex-column">
                <div class="activity-list flex-grow-1">
                    @if (Model?.RecentActivities != null && Model.RecentActivities.Any())
                    {
                        @foreach (var activity in Model.RecentActivities.Take(4))
                        {
                            <div class="activity-item d-flex mb-2 rounded">
                                <!-- Left Icon -->
                                <div class="activity-icon me-3 d-flex align-items-center">
                                    @switch (activity.ActivityType)
                                    {
                                        case "Borrowed":
                                            <i class="bi bi-arrow-down-circle text-warning fs-5"></i>
                                            break;
                                        case "Returned":
                                            <i class="bi bi-arrow-up-circle text-success fs-5"></i>
                                            break;
                                        case "Registered":
                                            <i class="bi bi-person-plus text-primary fs-5"></i>
                                            break;
                                        case "Overdue":
                                            <i class="bi bi-exclamation-triangle text-danger fs-5"></i>
                                            break;
                                        case "StatusChanged":
                                            <i class="bi bi-person-check text-info fs-5"></i>
                                            break;
                                        default:
                                            <i class="bi bi-circle text-secondary fs-5"></i>
                                            break;
                                    }
                                </div>

                                <!-- Right Content -->
                                <div class="flex-grow-1">
                                    <div class="d-flex justify-content-between">
                                        <span class="fw-bold">@activity.UserName</span>
                                        <span class="text-muted small">@activity.TimeAgo</span>
                                    </div>
                                    <div class="text-muted small">@activity.Description</div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-clock-history text-muted" style="font-size: 3rem;"></i>
                            <p class="text-muted mt-2">No recent activities</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Quick Actions -->
<div class="row my-4 " >
    <div class="col-12">
        <div class="card summary-card">
            <div class="card-header bg-white border-bottom">
                <h6 class="fw-bold mb-0 metric-label">Quick Actions</h6>
                <p class="text-muted small mb-0">Common administrative tasks</p>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <a class="card quick-action-card h-100 text-decoration-none text-dark"
                           asp-controller="ManageBooks" asp-action="Index">
                            <div class="card-body d-flex align-items-center">
                                <i class="bi bi-book me-3 fs-4 quick-action-icon text-secondary"></i>
                                <div>
                                    <h6 class="fw-bold mb-1">Manage Books</h6>
                                    <p class="text-muted small mb-0">Add, edit or remove books</p>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="col-md-4 mb-3">
                        <a class="card quick-action-card h-100 text-decoration-none text-dark"
                           asp-controller="Users" asp-action="Index">
                            <div class="card-body d-flex align-items-center">
                                <i class="bi bi-person-check me-3 fs-4 quick-action-icon text-secondary"></i>
                                <div>
                                    <h6 class="fw-bold mb-1">Verify Users</h6>
                                    <p class="text-muted small mb-0">Verify and manage user accounts</p>
                                </div>
                            </div>
                        </a>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card quick-action-card h-100 text-muted disabled-card">
                            <div class="card-body d-flex align-items-center">
                                <i class="bi bi-file-earmark-text me-3 fs-4"></i>
                                <div>
                                    <h6 class="fw-bold mb-1">Generate Reports</h6>
                                    <p class="small mb-0">Export system reports (coming soon)</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Chart.js default configuration
        Chart.defaults.font.family = "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif";
        Chart.defaults.color = '#6c757d';

        // Borrowing Trend Chart
        const borrowCanvas = document.getElementById('borrowTrendChart');
        if (borrowCanvas) {
            const borrowCtx = borrowCanvas.getContext('2d');
            const borrowLabels = @Html.Raw(
            System.Text.Json.JsonSerializer.Serialize(
            Model?.BorrowingTrend?.Select(x => x.Key) ?? Enumerable.Empty<string>()
            )
            );
            const borrowData = @Html.Raw(
            System.Text.Json.JsonSerializer.Serialize(
            Model?.BorrowingTrend?.Select(x => x.Value) ?? Enumerable.Empty<int>()
            )
            );

            new Chart(borrowCtx, {
                type: 'bar',
                data: {
                    labels: borrowLabels,
                    datasets: [{
                        label: 'Books Borrowed',
                        data: borrowData,
                        backgroundColor: 'rgba(0, 123, 255, 0.8)',
                        borderColor: 'rgba(0, 123, 255, 1)',
                        borderWidth: 1,
                        borderRadius: 4,
                        borderSkipped: false,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0, 0, 0, 0.8)',
                            titleColor: 'white',
                            bodyColor: 'white',
                            borderColor: 'rgba(0, 123, 255, 1)',
                            borderWidth: 1,
                            cornerRadius: 6,
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0,
                                stepSize: 1
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    }
                }
            });
        }

        // Category Pie Chart
        const categoryCanvas = document.getElementById('categoryPieChart');
        if (categoryCanvas) {
            const categoryCtx = categoryCanvas.getContext('2d');
            const categoryLabels = @Html.Raw(
            System.Text.Json.JsonSerializer.Serialize(
            Model?.BookCategoryPercentages?.Select(x => x.Key) ?? Enumerable.Empty<string>()
            )
            );
            const categoryData = @Html.Raw(
            System.Text.Json.JsonSerializer.Serialize(
            Model?.BookCategoryPercentages?.Select(x => x.Value) ?? Enumerable.Empty<double>()
            )
            );

            // Only create chart if we have data
            if (categoryLabels.length > 0 && categoryData.length > 0) {
                new Chart(categoryCtx, {
                    type: 'doughnut',
                    data: {
                        labels: categoryLabels,
                        datasets: [{
                            label: 'Book Categories (%)',
                            data: categoryData,
                            backgroundColor: [
                                '#007bff', '#28a745', '#ffc107', '#dc3545',
                                '#17a2b8', '#6f42c1', '#fd7e14', '#20c997',
                                '#6c757d', '#343a40'
                            ],
                            borderWidth: 2,
                            borderColor: '#fff',
                            hoverBorderWidth: 3,
                            hoverBorderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    boxWidth: 12,
                                    padding: 15,
                                    font: {
                                        size: 11
                                    }
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleColor: 'white',
                                bodyColor: 'white',
                                borderColor: 'rgba(255, 255, 255, 0.3)',
                                borderWidth: 1,
                                cornerRadius: 6,
                                callbacks: {
                                    label: function (context) {
                                        return context.label + ': ' + context.parsed.toFixed(1) + '%';
                                    }
                                }
                            }
                        },
                        cutout: '50%'
                    }
                });
            } else {
                // Show message if no data
                const container = categoryCanvas.parentElement;
                container.innerHTML = '<div class="d-flex align-items-center justify-content-center h-100"><div class="text-center"><i class="bi bi-pie-chart text-muted" style="font-size: 3rem;"></i><p class="text-muted mt-2">No category data available</p></div></div>';
            }
        }
    </script>
}